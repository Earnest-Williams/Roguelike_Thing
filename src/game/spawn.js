// src/game/spawn.js
// @ts-check

/**
 * @typedef {{ id: string, tags?: string[], spawnWeight?: number }} SpawnTemplate
 */

/**
 * Builds weighted spawn entries using theme tag weights when provided.
 *
 * @param {Record<string, SpawnTemplate>} templates
 * @param {{ weights?: { mobTags?: Record<string, number> } }} [theme]
 * @param {{ baseWeight?: number }} [options]
 */
export function buildSpawnWeights(templates, theme, options = {}) {
  const weights = [];
  if (!templates || typeof templates !== "object") return weights;
  const baseWeight = Number.isFinite(options.baseWeight) ? options.baseWeight : 1;
  const tagWeights = theme?.weights?.mobTags || {};

  for (const [id, template] of Object.entries(templates)) {
    if (!template) continue;
    const tags = Array.isArray(template.tags) ? template.tags : [];
    let weight = Number.isFinite(template.spawnWeight) ? template.spawnWeight : baseWeight;
    for (const tag of tags) {
      const delta = tagWeights[tag];
      if (Number.isFinite(delta)) weight += delta;
    }
    if (weight <= 0) continue;
    weights.push({ id, template, weight });
  }

  return weights;
}

/**
 * Picks a weighted entry from a list generated by buildSpawnWeights.
 *
 * @param {{ weight: number }[]} entries
 * @param {() => number} [rng]
 */
export function pickWeighted(entries, rng = Math.random) {
  if (!Array.isArray(entries) || entries.length === 0) return null;
  const picker = typeof rng === "function" ? rng : Math.random;
  const total = entries.reduce((sum, entry) => sum + Math.max(0, entry.weight || 0), 0) || 1;
  let roll = Math.floor(picker() * total);
  for (const entry of entries) {
    roll -= Math.max(0, entry.weight || 0);
    if (roll < 0) return entry;
  }
  return entries[0] || null;
}
